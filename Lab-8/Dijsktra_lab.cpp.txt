

//For simpilicity Assuming ,
//   node "a" as 1
//   node "b" as 2
//   node "c" as 3
//   and so on...
//

#include<bits/stdc++.h>
using namespace std;
#define whats(x) cout<<#x << " " << x <<endl

class Element
{
public:

    int node,distance;

    Element(int n,int d)
    {

        node=n;
        distance=d;

    }
    bool operator<(const Element &a)const &
    {
        return distance<a.distance;

    }
    bool operator>(const Element &a)const &
    {
        return distance > a.distance;
    }

};
priority_queue< Element,vector<Element>,greater<Element> > pq;

void dijkstra(int s,int dis[],bool vis[],vector<int> adj[] , vector<int> adjw[], int n,int prev[])
{
    dis[s]=0;
    for(int i=0; i<n; i++)
    {
        if(i!=s)
        {
            dis[i]=999999999;
        }
        vis[i]=false;
        prev[i]=i;

    }
    pq.push(Element(s, 0));
    int u, v, w;
    while(!pq.empty())
    {
        u=pq.top().node;
        pq.pop();
        if(vis[u]) continue;
        vis[u]=true;

        for(int i=0; i< adj[u].size(); i++)
        {
            v=adj[u][i];

            w=adjw[u][i];
            if(dis[u]+w < dis[v])
            {
                dis[v]=dis[u]+w;

                prev[v]=u;
                pq.push(Element(v, dis[v]));
            }
        }
    }
}

int main()
{
    int n,e;
    cout<<"Please Enter The Number of Nodes and edges:";
    cin>>n>>e;

    vector<int> adj[n+1];
    vector<int> adjw[n+1];
    int dis[n+1];
    bool vis[n+1];
    int prev[n+1];
    int u, v, w;

    cout<<"Now Enter The Edges and their Weight:\n";
    for(int i=0; i<e; i++)
    {

        cin>> u >> v >> w;
        adj[u].push_back(v);
        adj[v].push_back(u);

        adjw[u].push_back(w);
        adjw[v].push_back(w);
    }


    cout<<"\n Please Enter Your Source Node:";
    int s;
    cin>>s;

    dijkstra(s,dis,vis,adj ,adjw,n,prev);

    for(int i=0;i<n;i++){

        int n=i;
        printf("\nPath (%c): %c",97+i,97+i);
        do{
            printf("<- %c ",97+ prev[n]);
            n=prev[n];

        }
        while(n!=s);
        printf(", Total distance: %d",dis[i]);
    }
    return 0;
}
